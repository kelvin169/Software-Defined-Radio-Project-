import gnuradio
from gnuradio import blocks
from gnuradio import filter
from gnuradio import gr

# Define helper functions for error handling
def check_file_exists(filename):
  """Checks if a file exists and raises an exception if not."""
  if not os.path.isfile(filename):
    raise FileNotFoundError(f"File not found: {filename}")

def check_modulation_type(modulation_type):
  """Checks if the modulation type is supported and raises an exception if not."""
  supported_types = [gnuradio.modulation.qam.QAMConstellation(n) for n in [2, 4, 8, 16]]
  if modulation_type not in supported_types:
    raise ValueError(f"Unsupported modulation type: {modulation_type}")

# Define the modulation and coding scheme (with error handling)
try:
  modulation_type = gnuradio.modulation.qam.QAMConstellation(4)
except TypeError:
  print("Error: Invalid modulation type. Using default QAM(4).")
  modulation_type = gnuradio.modulation.qam.QAMConstellation(4)
coder = gnuradio.digital.constellation_encoder.constellation_encoder(modulation_type)

# Define the carrier frequency and frequency stability
carrier_frequency = 435e6  # VHF band
pll = blocks.pll_cf(ref_frequency=carrier_frequency, loop_bandwidth=1000)

# Define the noise figure and signal-to-noise ratio (SNR)
lna = blocks.voltaire_rx(gain=30)  # Low-noise amplifier
noise_reducer = blocks.iir_filter_ffd(2, [0.8, -0.8], 1.0)  # Noise reduction filter

# Define the data processing and demodulation
synchronizer = blocks.digital_sync_block(sample_rate=1e6, symbol_rate=1e5)
channel_estimator = blocks.channel_estimator_mmse_cc(taps=10)
equalizer = blocks.equalizer_lms(sample_rate=1e6, symbol_rate=1e5, num_taps=20)
demodulator = blocks.qam_demod(modulation_type)
error_corrector = blocks.reed_solomon_decoder(8, 4)

# Define the data protocols and communication standards
ax25_encoder = blocks.packet_encoder_ax25()
tcp_decapsulator = blocks.tcp_decapsulator(port=10000)
dass_encoder = blocks.dass_encoder()  # Optional voice compression

# Define the in-orbit reconfigurability
reconfig_manager = blocks.reconfig_manager(sync_state=None)

# Create the flowgraph
top_block = gr.top_block("SDR_Platform")

# Connect the blocks
try:
  check_file_exists("received_signal.dat")
  check_file_exists("decoded_data.dat")
  top_block.connect(
      blocks.file_source(filename="received_signal.dat"),
      lna,
      noise_reducer,
      pll,
      synchronizer,
      channel_estimator,
      equalizer,
      demodulator,
      error_corrector,
      reconfig_manager,
      tcp_decapsulator,
      blocks.file_sink(filename="decoded_data.dat"),
  )
except (FileNotFoundError, ValueError) as e:
  print(f"Error: {e}")
  top_block = None  # Prevent running if errors occur

# Run the flowgraph (if no errors)
if top_block:
  top_block.run()
